import logging
import asyncio
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters)
import config
from pdf_generator import generate_pdf

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SELECTING_TEMPLATE = 1
ENTERING_TEXT = 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "üëã *–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–∞–ø–∏—à–∏ /generate.*"
    )
    await update.message.reply_text(message, parse_mode="Markdown")

async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "üìÑ –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é.\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start."
    )
    keyboard = [
        [InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        ]
    ]
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = "üìÑ *–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω*:"
    keyboard = []
    for name in config.TEMPLATES.keys():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"template_{name}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data["state"] = SELECTING_TEMPLATE

async def template_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    name = query.data.replace("template_", "")
    if name not in config.TEMPLATES:
        await query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    context.user_data["template"] = name
    context.user_data["state"] = ENTERING_TEXT
    await query.message.edit_text(
        f"‚úÖ –®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω: *{name}*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ])
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]))

async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    if "template" not in context.user_data:
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    client_name = update.message.text.strip()
    template_name = context.user_data["template"]
    try:
        template_path = config.TEMPLATES[template_name]
        pdf_path = generate_pdf(template_path, client_name)
        filename = f"{client_name}.pdf"
        with open(pdf_path, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)

        keyboard = [
            [InlineKeyboardButton("üìÑ –°–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await update.message.reply_text(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –∏ –±–æ—Ç —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞—Å—Ç PDF.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF.")

async def handle_webhook(request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response(text="ok")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:")
        return web.Response(status=500, text="error")

async def home(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def main():
    global application
    application = Application.builder().token(config.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate", generate))
    application.add_handler(CallbackQueryHandler(select_template, pattern="select_template"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="main_menu"))
    application.add_handler(CallbackQueryHandler(cancel, pattern="cancel"))
    application.add_handler(CallbackQueryHandler(template_selected, pattern="template_.*"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text))

    await application.initialize()
    await application.bot.set_webhook(url=config.WEBHOOK_URL)
    await application.start()

    app = web.Application()
    app.router.add_post("/telegram", handle_webhook)
    app.router.add_get("/", home)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port=8080)
    await site.start()

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
