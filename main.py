import os
import sqlite3
import subprocess
import tempfile
import shutil
from datetime import datetime
import pytz
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, MessageHandler,
    Filters, ConversationHandler, CallbackContext
)
from docx import Document
from flask import Flask, request

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
app = Flask(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –≤–µ–±—Ö—É–∫
TOKEN = os.environ.get('BOT_TOKEN', '7511704960:AAFKDWgg2-cAzRxywX1gXK47OQRWJi72qGw')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://final-bot1-0.onrender.com/webhook')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_TEMPLATE, INPUT_NAME, CHOOSE_DATE, INPUT_CUSTOM_DATE, ASK_SAVE = range(5)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤–∞
kiev_tz = pytz.timezone('Europe/Kiev')

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
TEMPLATE_FILES = {
    'template_imperative': 'templates/template_imperative.docx',
    'template_ur': 'templates/template_ur.docx',
    'template_small_world': 'templates/template_small_world.docx',
}

def check_templates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ø–∞–ø–∫–µ templates/."""
    missing_templates = [path for path in TEMPLATE_FILES.values() if not os.path.exists(path)]
    if missing_templates:
        raise FileNotFoundError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—ã: {', '.join(missing_templates)}")

def replace_text_in_paragraph(paragraph, key, value):
    """–ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if key in paragraph.text:
        inline = paragraph.runs
        for i in range(len(inline)):
            if key in inline[i].text:
                inline[i].text = inline[i].text.replace(key, value)

def replace_text(doc, key, value):
    """–ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ Word."""
    for paragraph in doc.paragraphs:
        replace_text_in_paragraph(paragraph, key, value)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    replace_text_in_paragraph(paragraph, key, value)

def generate_and_send_document(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ PDF."""
    template = context.user_data['template']
    client_name = context.user_data['client_name']
    date_time = context.user_data['date_time']
    chat_id = update.effective_chat.id

    context.bot.send_message(chat_id=chat_id, text="üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... ‚è≥")
    template_path = TEMPLATE_FILES[template]

    try:
        with tempfile.TemporaryDirectory() as tmpdirname:
            docx_path = os.path.join(tmpdirname, 'document.docx')
            pdf_path = os.path.join(tmpdirname, 'document.pdf')
            shutil.copy(template_path, docx_path)

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc = Document(docx_path)
            replace_text(doc, "Client:", f"Client: {client_name}")
            replace_text(doc, "Date:", f"Date: {date_time}")
            replace_text(doc, "DATE:", f"DATE: {date_time}")
            doc.save(docx_path)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PDF
            subprocess.run(['libreoffice', '--headless', '--convert-to', 'pdf', docx_path, '--outdir', tmpdirname], check=True)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
            with open(pdf_path, 'rb') as f:
                context.bot.send_document(chat_id=chat_id, document=f, caption="‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!")
    except Exception as e:
        context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç, –±—Ä–æ! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. üöÄ\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/generate - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "/list_saved - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /generate! üòé"
    )

def start_generate(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    try:
        check_templates()
    except FileNotFoundError as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("Imperative", callback_data='template_imperative')],
        [InlineKeyboardButton("UR Recruitment", callback_data='template_ur')],
        [InlineKeyboardButton("Small World", callback_data='template_small_world')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('üìã –í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω:', reply_markup=reply_markup)
    return SELECT_TEMPLATE

def template_selected(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞."""
    query = update.callback_query
    query.answer()
    template = query.data
    context.user_data['template'] = template
    query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template.replace('template_', '').title()}")
    query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return INPUT_NAME

def name_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    context.user_data['client_name'] = update.message.text.strip()
    keyboard = [
        [InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data='current_date')],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É", callback_data='custom_date')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('üìÖ –•–æ—á–µ—à—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –ö–∏–µ–≤—É –∏–ª–∏ —Å–≤–æ—é?', reply_markup=reply_markup)
    return CHOOSE_DATE

def date_chosen(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    query = update.callback_query
    query.answer()
    if query.data == 'current_date':
        now = datetime.now(pytz.utc).astimezone(kiev_tz)
        date_time = now.strftime("%d.%m.%Y %H:%M")
        context.user_data['date_time'] = date_time
        generate_and_send_document(update, context)
        ask_to_save(update, context)
        return ASK_SAVE
    else:
        query.message.reply_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
        return INPUT_CUSTOM_DATE

def input_custom_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã."""
    try:
        date_time = datetime.strptime(update.message.text.strip(), "%d.%m.%Y %H:%M")
        context.user_data['date_time'] = update.message.text.strip()
        generate_and_send_document(update, context)
        ask_to_save(update, context)
        return ASK_SAVE
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
        return INPUT_CUSTOM_DATE

def ask_to_save(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    keyboard = [
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save')],
        [InlineKeyboardButton("üö´ –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data='dont_save')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.effective_message.reply_text('–•–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞?', reply_markup=reply_markup)

def save_decision(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏."""
    query = update.callback_query
    query.answer()
    if query.data == 'save':
        user_id = query.from_user.id
        template = context.user_data['template']
        client_name = context.user_data['client_name']
        date_time = context.user_data['date_time']
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("INSERT INTO saved_documents (user_id, template, client_name, date) VALUES (?, ?, ?, ?)",
                  (user_id, template, client_name, date_time))
        conn.commit()
        conn.close()
        query.edit_message_text(text="üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üéâ")
    else:
        query.edit_message_text(text="üö´ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    query.message.reply_text("üîÑ –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç? –ñ–º–∏ /generate üòé")
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    update.message.reply_text('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –ñ–º–∏ /generate üòé')
    return ConversationHandler.END

def list_saved(update: Update, context: CallbackContext):
    """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
    user_id = update.effective_user.id
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT id, template, client_name, date FROM saved_documents WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    conn.close()
    if not rows:
        update.message.reply_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
    else:
        text = "üìã –¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
        for row in rows:
            text += f"üÜî {row[0]} | –®–∞–±–ª–æ–Ω: {row[1].replace('template_', '').title()} | –ö–ª–∏–µ–Ω—Ç: {row[2]} | –î–∞—Ç–∞: {row[3]}\n"
        update.message.reply_text(text)

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram."""
    try:
        update = Update.de_json(request.get_json(force=True), updater.bot)
        dispatcher.process_update(update)
    except Exception as e:
        print(f"Webhook error: {e}")
    return 'OK'

@app.route('/ping')
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Uptime Robot."""
    return 'OK'

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS saved_documents
                 (id INTEGER PRIMARY KEY, user_id INTEGER, template TEXT, client_name TEXT, date TEXT)''')
    conn.commit()
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    try:
        check_templates()
    except FileNotFoundError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        exit(1)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    global updater
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('generate', start_generate)],
        states={
            SELECT_TEMPLATE: [CallbackQueryHandler(template_selected)],
            INPUT_NAME: [MessageHandler(Filters.text & ~Filters.command, name_input)],
            CHOOSE_DATE: [CallbackQueryHandler(date_chosen)],
            INPUT_CUSTOM_DATE: [MessageHandler(Filters.text & ~Filters.command, input_custom_date)],
            ASK_SAVE: [CallbackQueryHandler(save_decision)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(CommandHandler('list_saved', list_saved))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        updater.bot.set_webhook(url=WEBHOOK_URL)
        print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    main()
