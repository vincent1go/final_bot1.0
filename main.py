import asyncio
from flask import Flask, request, send_file
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from io import BytesIO
from docx import Document

TOKEN = "7511704960:AAFKDWgg2-cAzRxywX1gXK47OQRWJi72qGw"
WEBHOOK_URL = "https://final-bot1-0.onrender.com/webhook"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton("üìÑ –ü–æ–ª—É—á–∏—Ç—å PDF", callback_data="generate_pdf")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=reply_markup,
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ PDF (–∏–∑ docx ‚Üí pdf)
async def generate_pdf():
    doc = Document()
    doc.add_heading('–î–æ–∫—É–º–µ–Ω—Ç', level=1)
    doc.add_paragraph('–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–æ—Ç–æ–º!')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º DOCX –≤ –ø–∞–º—è—Ç—å
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)

    return buffer

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main_menu":
        await query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÑ –ü–æ–ª—É—á–∏—Ç—å PDF", callback_data="generate_pdf")],
                [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]
            ])
        )
    elif query.data == "about_bot":
        await query.edit_message_text(
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!\n\n"
            "‚ö° –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Python + Flask + Telegram API.\n"
            "–°–æ–∑–¥–∞–Ω –¢–æ–±–æ–π üî•"
        )
    elif query.data == "generate_pdf":
        pdf_buffer = await generate_pdf()
        await query.message.reply_document(document=pdf_buffer, filename="document.docx")
        await query.edit_message_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# Webhook –¥–ª—è Telegram
@app.route('/webhook', methods=['POST'])
async def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    await application.process_update(update)
    return "ok"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
async def setup_webhook():
    await application.bot.set_webhook(url=WEBHOOK_URL)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await setup_webhook()
    app.run(host="0.0.0.0", port=5000)

# –•–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_handler))

if __name__ == '__main__':
    asyncio.run(main())

