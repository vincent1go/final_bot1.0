import os
import uuid
import subprocess
import sqlite3
import logging
import asyncio
import traceback
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
import random

import docx
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from dateutil.parser import parse
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.critical("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(BOT_TOKEN).build()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    MAIN_MENU,
    SELECT_TEMPLATE,
    INPUT_NAME,
    CHANGE_DATE,
    INPUT_NEW_DATE,
    GENERATE_ANOTHER,
    VIEW_BOOKMARKS,
    VIEW_VACANCIES,
    VIEW_VACANCY_DETAILS
) = range(9)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("bookmarks.db") as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS bookmarks
                    (user_id INTEGER, 
                     client_name TEXT, 
                     template_name TEXT, 
                     date TEXT)""")
        conn.commit()

init_db()

# –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
TEMPLATES = {
    "ur_recruitment": "template_ur.docx",
    "small_world": "template_small_world.docx",
    "imperative": "template_imperative.docx",
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
VACANCIES = [
    {
        "id": "vac_1",
        "title": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞ –∑–∞–≤–æ–¥ Coca-Cola",
        "location": "–õ–æ–Ω–¥–æ–Ω",
        "salary": "3700-4100¬£",
        "description": """–¢—Ä–µ–±—É—é—Ç—Å—è –°–û–¢–†–£–î–ù–ò–ö–ò –ù–ê –ó–ê–í–û–î
–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é Coca-Cola Europacific Partners, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß
–ì–æ—Ä–æ–¥: –õ–æ–Ω–¥–æ–Ω üèôÔ∏è

–ó–∞—Ä–ø–ª–∞—Ç–∞:
–û—Ç 3700 –¥–æ 4100¬£/–º–µ—Å—è—Ü 
–í—ã–ø–ª–∞—Ç—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –∏–ª–∏ –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ 

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ú—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã 18‚Äì55 –ª–µ—Ç üë®‚Äçüîßüë©‚Äçüîß
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å 
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ üá¨üáß
‚Ä¢ –û–ø—ã—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ ‚Äî –ø–ª—é—Å, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω 

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ –ª–∏–Ω–∏–∏ —Ä–æ–∑–ª–∏–≤–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ 
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫ –∏ —É–ø–∞–∫–æ–≤–∫–∏ 
‚Ä¢ –£–ø–∞–∫–æ–≤–∫–∞ –ø–∞–ª–ª–µ—Ç, –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ üì¶
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ 
‚Ä¢ –†–∞–±–æ—Ç–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ü–µ—Ö—É 

–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –°–º–µ–Ω—ã –ø–æ 8‚Äì12 —á–∞—Å–æ–≤ ‚è±Ô∏è
‚Ä¢ 5‚Äì6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é 

–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º 
‚Ä¢ 2‚Äì3 —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ, –∂–∏–ª—å—ë —Ä—è–¥–æ–º —Å —Ä–∞–±–æ—Ç–æ–π"""
    },
    {
        "id": "vac_2",
        "title": "–†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å–∫–ª–∞–¥–∞ Amazon",
        "location": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä",
        "salary": "3800-4200¬£",
        "description": """–¢—Ä–µ–±—É—é—Ç—Å—è –†–ê–ë–û–¢–ù–ò–ö–ò –°–ö–õ–ê–î–ê
–≤ –∫–æ–º–ø–∞–Ω–∏—é Amazon, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß
–ì–æ—Ä–æ–¥: –ú–∞–Ω—á–µ—Å—Ç–µ—Ä üèôÔ∏è

–ó–∞—Ä–ø–ª–∞—Ç–∞:
–û—Ç 3800 –¥–æ 4200¬£/–º–µ—Å—è—Ü 

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç 18‚Äì50 –ª–µ—Ç
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ —É–ø–∞–∫–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–≥—Ä—É–∑–æ—á–Ω–æ-—Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã

–ì—Ä–∞—Ñ–∏–∫:
‚Ä¢ –°–º–µ–Ω—ã –ø–æ 9‚Äì11 —á–∞—Å–æ–≤
‚Ä¢ 5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:
‚Ä¢ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∂–∏–ª—å—è"""
    },
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 28 –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    {
        "id": "vac_3",
        "title": "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ç–∞–Ω–∫–æ–≤",
        "location": "–ë–∏—Ä–º–∏–Ω–≥–µ–º",
        "salary": "3900-4300¬£",
        "description": """–¢—Ä–µ–±—É—é—Ç—Å—è –û–ü–ï–†–ê–¢–û–†–´ –°–¢–ê–ù–ö–û–í
–Ω–∞ –º–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß
–ì–æ—Ä–æ–¥: –ë–∏—Ä–º–∏–Ω–≥–µ–º üèôÔ∏è

–ó–∞—Ä–ø–ª–∞—Ç–∞:
3900-4300¬£/–º–µ—Å—è—Ü

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ú—É–∂—á–∏–Ω—ã 20‚Äì45 –ª–µ—Ç
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–µ

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö –ß–ü–£
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ

–ì—Ä–∞—Ñ–∏–∫:
‚Ä¢ –°–º–µ–Ω—ã –ø–æ 8‚Äì10 —á–∞—Å–æ–≤
‚Ä¢ 5‚Äì6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ"""
    }
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
for i in range(4, 31):
    cities = ["–õ–æ–Ω–¥–æ–Ω", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä", "–ë–∏—Ä–º–∏–Ω–≥–µ–º", "–õ–∏–≤–µ—Ä–ø—É–ª—å", "–ì–ª–∞–∑–≥–æ", "–®–µ—Ñ—Ñ–∏–ª–¥"]
    positions = ["—Ñ–∞—Å–æ–≤—â–∏–∫–∏", "–≥—Ä—É–∑—á–∏–∫–∏", "—É–ø–∞–∫–æ–≤—â–∏–∫–∏", "–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã", "–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∏", "–∫–ª–∞–¥–æ–≤—â–∏–∫–∏"]
    companies = ["Tesco", "Sainsbury's", "Asda", "Morrisons", "IKEA", "DHL"]
    
    city = random.choice(cities)
    position = random.choice(positions)
    company = random.choice(companies)
    salary_min = random.randint(3700, 3900)
    salary_max = salary_min + random.randint(200, 400)
    
    VACANCIES.append({
        "id": f"vac_{i}",
        "title": f"{position.capitalize()} –¥–ª—è {company}",
        "location": city,
        "salary": f"{salary_min}-{salary_max}¬£",
        "description": f"""–¢—Ä–µ–±—É—é—Ç—Å—è {position.upper()}
–≤ –∫–æ–º–ø–∞–Ω–∏—é {company}, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß
–ì–æ—Ä–æ–¥: {city} üèôÔ∏è

–ó–∞—Ä–ø–ª–∞—Ç–∞:
{salary_min}-{salary_max}¬£/–º–µ—Å—è—Ü

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç 18‚Äì50 –ª–µ—Ç
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ/—Å–∫–ª–∞–¥–µ
‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á

–ì—Ä–∞—Ñ–∏–∫:
‚Ä¢ –°–º–µ–Ω—ã –ø–æ {random.choice(['8-10', '9-11', '10-12'])} —á–∞—Å–æ–≤
‚Ä¢ {random.choice(['5', '5-6'])} –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:
‚Ä¢ {random.choice(['–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º', '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 50%', '–ü–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –∂–∏–ª—å—è'])}"""
    })

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="select_template")],
        [InlineKeyboardButton("üìÅ –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ", callback_data="view_bookmarks")],
        [InlineKeyboardButton("üíº –í–∞–∫–∞–Ω—Å–∏–∏ –≤ UK", callback_data="view_vacancies")]
    ])

def get_action_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚≠ê –í –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmark"),
            InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="change_date")
        ],
        [
            InlineKeyboardButton("üìã –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="select_template"),
            InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="main_menu")
        ]
    ])

async def cleanup_files(*files):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    for file in files:
        if os.path.exists(file):
            try:
                os.remove(file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")

def replace_client_and_date(doc_path, client_name, date_str, template_key):
    """–ó–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ DOCX"""
    try:
        if not os.path.exists(doc_path):
            raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω {doc_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        doc = docx.Document(doc_path)
        
        # –ó–∞–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
        client_replaced = False
        for para in doc.paragraphs:
            if "Client:" in para.text:
                if template_key == "small_world":
                    para.text = f"Client: {client_name}"
                else:
                    para.text = para.text.replace("Client:", f"Client: {client_name}")
                client_replaced = True
                break
        
        # –ó–∞–º–µ–Ω–∞ –¥–∞—Ç—ã
        date_replaced_count = 0
        for para in doc.paragraphs[-4:]:
            if ("Date:" in para.text or "DATE:" in para.text) and date_replaced_count < 2:
                para.text = para.text.replace("Date:", f"Date: {date_str}")
                para.text = para.text.replace("DATE:", f"Date: {date_str}")
                date_replaced_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        temp_path = f"temp_{uuid.uuid4()}.docx"
        doc.save(temp_path)
        return temp_path
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise

def convert_to_pdf(doc_path, client_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ PDF"""
    try:
        subprocess.run(
            [
                "libreoffice",
                "--headless",
                "--nofirststartwizard",
                "--convert-to",
                "pdf",
                "--outdir",
                os.path.dirname(doc_path) or ".",
                doc_path
            ],
            check=True,
            timeout=60
        )
        
        temp_pdf = os.path.splitext(doc_path)[0] + ".pdf"
        pdf_path = f"{client_name}.pdf"
        
        if os.path.exists(temp_pdf):
            os.rename(temp_pdf, pdf_path)
            return pdf_path
        raise FileNotFoundError("PDF –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        raise

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.message:
        await update.message.reply_text(text, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    return MAIN_MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    return await main_menu(update, context)

async def select_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù UR Recruitment", callback_data="ur_recruitment")],
        [InlineKeyboardButton("üåç Small World", callback_data="small_world")],
        [InlineKeyboardButton("‚ö° Imperative", callback_data="imperative")],
    ]
    await query.edit_message_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_TEMPLATE

async def handle_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    context.user_data["template_key"] = query.data
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return INPUT_NAME

async def generate_document(update, context, new_date=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    client_name = update.message.text.strip()
    template_key = context.user_data["template_key"]
    template_path = os.path.join("templates", TEMPLATES[template_key])
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã
    kyiv_tz = ZoneInfo("Europe/Kiev")
    date_str = new_date or datetime.now(kyiv_tz).strftime("%Y-%m-%d")
    context.user_data.update({
        "client_name": client_name,
        "date": date_str
    })
    
    try:
        await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        temp_doc = replace_client_and_date(template_path, client_name, date_str, template_key)
        pdf_path = convert_to_pdf(temp_doc, client_name)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        with open(pdf_path, "rb") as f:
            await update.message.reply_document(document=f, filename=f"{client_name}.pdf")
        
        # –û—á–∏—Å—Ç–∫–∞
        await cleanup_files(temp_doc, pdf_path)
        
        # –û—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_action_keyboard()
        )
        return CHANGE_DATE
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    return await generate_document(update, context)

async def bookmark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_data = {
        "user_id": query.from_user.id,
        "client_name": context.user_data["client_name"],
        "template_key": context.user_data["template_key"],
        "date": context.user_data["date"]
    }
    
    try:
        with sqlite3.connect("bookmarks.db") as conn:
            conn.execute(
                "INSERT INTO bookmarks VALUES (?, ?, ?, ?)",
                (user_data["user_id"], user_data["client_name"], 
                 user_data["template_key"], user_data["date"])
            )
        await query.edit_message_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–ª–∞–¥–∫–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    
    return CHANGE_DATE

async def change_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    return INPUT_NEW_DATE

async def receive_new_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    try:
        parsed_date = parse(update.message.text.strip())
        new_date = parsed_date.strftime("%Y-%m-%d")
        return await generate_document(update, context, new_date)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return INPUT_NEW_DATE

async def view_bookmarks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–ª–∞–¥–æ–∫"""
    try:
        user_id = update.effective_user.id
        
        with sqlite3.connect("bookmarks.db") as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT client_name, template_name, date FROM bookmarks WHERE user_id = ?",
                (user_id,)
            )
            bookmarks = cursor.fetchall()
        
        if not bookmarks:
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            else:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return await main_menu(update, context)
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìå {client} ({template}, {date})",
                callback_data=f"bookmark_{client}_{template}_{date}"
            )] for client, template, date in bookmarks
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                "üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text(
                "üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return VIEW_BOOKMARKS
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!")
        return await main_menu(update, context)

async def regenerate_bookmark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∑–∞–∫–ª–∞–¥–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        
        parts = query.data.split("_", 3)
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–∫–∏")
            
        _, client, template, date = parts
        context.user_data.update({
            "client_name": client,
            "template_key": template,
            "date": date
        })
        
        template_path = os.path.join("templates", TEMPLATES[template])
        await query.edit_message_text("‚è≥ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        temp_doc = replace_client_and_date(template_path, client, date, template)
        pdf_path = convert_to_pdf(temp_doc, client)
        
        with open(pdf_path, "rb") as f:
            await query.message.reply_document(document=f, filename=f"{client}.pdf")
        
        await cleanup_files(temp_doc, pdf_path)
        await query.message.reply_text(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_action_keyboard()
        )
        return CHANGE_DATE
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!")
        return await main_menu(update, context)

async def view_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    query = update.callback_query
    await query.answer()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 —à—Ç—É–∫
    page = context.user_data.get("vacancy_page", 0)
    start_idx = page * 5
    end_idx = start_idx + 5
    current_vacancies = VACANCIES[start_idx:end_idx]
    
    keyboard = []
    for vacancy in current_vacancies:
        keyboard.append([
            InlineKeyboardButton(
                f"{vacancy['title']} | {vacancy['location']} | {vacancy['salary']}",
                callback_data=f"vacancy_{vacancy['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vac_prev_page"))
    if end_idx < len(VACANCIES):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="vac_next_page"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    await query.edit_message_text(
        "üíº *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return VIEW_VACANCIES

async def handle_vacancy_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∞–∫–∞–Ω—Å–∏–π"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "vac_prev_page":
        context.user_data["vacancy_page"] = context.user_data.get("vacancy_page", 0) - 1
    elif query.data == "vac_next_page":
        context.user_data["vacancy_page"] = context.user_data.get("vacancy_page", 0) + 1
    
    return await view_vacancies(update, context)

async def view_vacancy_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    vacancy_id = query.data.split("_")[1]
    vacancy = next((v for v in VACANCIES if v["id"] == vacancy_id), None)
    
    if not vacancy:
        await query.edit_message_text("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return await main_menu(update, context)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º", callback_data="view_vacancies")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(
        vacancy["description"],
        reply_markup=keyboard
    )
    return VIEW_VACANCY_DETAILS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    context.user_data.clear()
    return await main_menu(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}\n{traceback.format_exc()}")
    if update:
        msg = update.message or update.callback_query.message
        await msg.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        CommandHandler("menu", main_menu),
        CommandHandler("templates", select_template),
        CommandHandler("bookmarks", view_bookmarks),
        CommandHandler("vacancies", view_vacancies),
        MessageHandler(filters.Text(["–º–µ–Ω—é", "menu"]), main_menu),
        MessageHandler(filters.Text(["—à–∞–±–ª–æ–Ω—ã", "templates"]), select_template),
        MessageHandler(filters.Text(["–∑–∞–∫–ª–∞–¥–∫–∏", "bookmarks"]), view_bookmarks),
        MessageHandler(filters.Text(["–≤–∞–∫–∞–Ω—Å–∏–∏", "vacancies"]), view_vacancies),
    ],
    states={
        MAIN_MENU: [
            CallbackQueryHandler(select_template, pattern="select_template"),
            CallbackQueryHandler(view_bookmarks, pattern="view_bookmarks"),
            CallbackQueryHandler(view_vacancies, pattern="view_vacancies"),
        ],
        SELECT_TEMPLATE: [CallbackQueryHandler(handle_template_selection)],
        INPUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
        CHANGE_DATE: [
            CallbackQueryHandler(bookmark, pattern="bookmark"),
            CallbackQueryHandler(change_date, pattern="change_date"),
            CallbackQueryHandler(select_template, pattern="select_template"),
            CallbackQueryHandler(main_menu, pattern="main_menu"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name),
        ],
        INPUT_NEW_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new_date)],
        VIEW_BOOKMARKS: [
            CallbackQueryHandler(regenerate_bookmark, pattern="bookmark_.*"),
            CallbackQueryHandler(main_menu, pattern="main_menu"),
        ],
        VIEW_VACANCIES: [
            CallbackQueryHandler(view_vacancy_details, pattern="vacancy_.*"),
            CallbackQueryHandler(handle_vacancy_pagination, pattern="vac_(prev|next)_page"),
            CallbackQueryHandler(main_menu, pattern="main_menu"),
        ],
        VIEW_VACANCY_DETAILS: [
            CallbackQueryHandler(view_vacancies, pattern="view_vacancies"),
            CallbackQueryHandler(main_menu, pattern="main_menu"),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_message=False
)

application.add_handler(conv_handler)
application.add_error_handler(error_handler)

# –í–µ–±—Ö—É–∫
async def webhook_handler(request):
    try:
        update = telegram.Update.de_json(await request.json(), application.bot)
        await application.process_update(update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500)

async def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    runner = None
    site = None
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB
        await application.initialize()
        await application.start()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        app = web.Application()
        app.router.add_post("/webhook", webhook_handler)
        app.router.add_get("/ping", lambda _: web.Response(text="OK"))
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        port = int(os.getenv("PORT", 10000))
        site = web.TCPSite(runner, "0.0.0.0", port)
        
        await site.start()
        logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)
            
    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        if site:
            await site.stop()
        if runner:
            await runner.cleanup()
        if application:
            await application.stop()
            await application.shutdown()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = ["templates"]
    for directory in required_dirs:
        if not os.path.exists(directory):
            logger.error(f"üìÇ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}!")
            exit(1)
    
    try:
        asyncio.run(run_server())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
