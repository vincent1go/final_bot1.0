import os
import uuid
import subprocess
import sqlite3
import logging
import asyncio
import traceback
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
import random
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

import docx
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from dateutil.parser import parse
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.critical("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(BOT_TOKEN).build()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    MAIN_MENU,
    SELECT_TEMPLATE,
    INPUT_NAME,
    CHANGE_DATE,
    INPUT_NEW_DATE,
    VIEW_BOOKMARKS,
    VIEW_VACANCIES,
    VIEW_VACANCY_DETAILS
) = range(8)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("bookmarks.db") as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS bookmarks
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER NOT NULL,
                     client_name TEXT NOT NULL,
                     template_name TEXT NOT NULL,
                     date TEXT NOT NULL,
                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)""")
        conn.commit()

init_db()

# –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
TEMPLATES = {
    "ur_recruitment": {
        "file": "template_ur.docx",
        "date_format": "Date:"
    },
    "small_world": {
        "file": "template_small_world.docx",
        "date_format": "Date:",
        "signature": True
    },
    "imperative": {
        "file": "template_imperative.docx",
        "date_format": "DATE:"
    }
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π (30 –ø—Ä–∏–º–µ—Ä–æ–≤)
VACANCIES = [
    {
        "id": f"vac_{i}",
        "title": f"{random.choice(['–†–∞–±–æ—Ç–Ω–∏–∫', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'])} {random.choice(['—Å–∫–ª–∞–¥–∞', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '—Ü–µ—Ö–∞'])}",
        "location": random.choice(["–õ–æ–Ω–¥–æ–Ω", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä", "–ë–∏—Ä–º–∏–Ω–≥–µ–º"]),
        "salary": f"{random.randint(3700, 3900)}-{random.randint(4000, 4500)}¬£",
        "description": f"""üîπ *{random.choice(['–¢—Ä–µ–±—É—é—Ç—Å—è', '–ù—É–∂–Ω—ã'])} {random.choice(['—Ä–∞–±–æ—Ç–Ω–∏–∫–∏', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã'])}* üîπ

üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {random.choice(['Amazon', 'Tesco', 'Coca-Cola', 'DHL'])}
üåç *–õ–æ–∫–∞—Ü–∏—è:* –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, {random.choice(['–õ–æ–Ω–¥–æ–Ω', '–ú–∞–Ω—á–µ—Å—Ç–µ—Ä', '–ë–∏—Ä–º–∏–Ω–≥–µ–º'])}
üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {random.randint(3700, 3900)}-{random.randint(4000, 4500)}¬£/–º–µ—Å—è—Ü

üìå *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç 18‚Äì50 –ª–µ—Ç
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è

üìã *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ {random.choice(['–†–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ', '–†–∞–±–æ—Ç–∞ —Å–æ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏'])}
‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á

‚è± *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –°–º–µ–Ω—ã –ø–æ {random.choice(['8-10', '9-11', '10-12'])} —á–∞—Å–æ–≤
‚Ä¢ {random.choice(['5', '5-6'])} –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

üè† *–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ {random.choice(['–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 50%', '–ü–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ'])}"""
    } for i in range(1, 31)
]

def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="select_template")],
        [InlineKeyboardButton("üìÅ –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ", callback_data="view_bookmarks")],
        [InlineKeyboardButton("üíº –í–∞–∫–∞–Ω—Å–∏–∏ –≤ UK", callback_data="view_vacancies")]
    ])

def get_action_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –í –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmark")],
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="change_date")],
        [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data="select_template")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

async def cleanup_files(*files):
    for file in files:
        try:
            if file and os.path.exists(file):
                os.remove(file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")

def process_template(doc_path, client_name, date_str, template_key):
    doc = docx.Document(doc_path)
    template_config = TEMPLATES[template_key]
    
    # –ó–∞–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    for para in doc.paragraphs:
        if "Client:" in para.text:
            para.text = para.text.replace("Client:", f"Client: {client_name}")
            break
    
    # –ó–∞–º–µ–Ω–∞ –¥–∞—Ç—ã
    date_replaced = False
    for para in doc.paragraphs[-6:]:
        if template_config["date_format"] in para.text:
            para.text = para.text.replace(
                template_config["date_format"], 
                f"{template_config['date_format']} {date_str}"
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            if template_config.get("signature"):
                if os.path.exists("signature.png"):
                    para.add_run().add_picture("signature.png", width=Inches(1.5))
                    para.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
                else:
                    para.add_run("\t[–ü–æ–¥–ø–∏—Å—å –∏ –ø–µ—á–∞—Ç—å]")
            
            date_replaced = True
            break
    
    if not date_replaced:
        raise ValueError("–ü–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —à–∞–±–ª–æ–Ω–µ")
    
    temp_path = f"temp_{uuid.uuid4()}.docx"
    doc.save(temp_path)
    return temp_path

def convert_to_pdf(doc_path, output_name):
    try:
        subprocess.run(
            [
                "libreoffice",
                "--headless",
                "--nofirststartwizard",
                "--convert-to",
                "pdf",
                "--outdir",
                os.path.dirname(doc_path) or ".",
                doc_path
            ],
            check=True,
            timeout=60
        )
        
        temp_pdf = os.path.splitext(doc_path)[0] + ".pdf"
        pdf_path = f"{output_name}.pdf"
        
        if os.path.exists(temp_pdf):
            os.rename(temp_pdf, pdf_path)
            return pdf_path
        raise FileNotFoundError("PDF –Ω–µ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!",
        reply_markup=get_main_keyboard()
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
    return MAIN_MENU

async def select_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù UR Recruitment", callback_data="ur_recruitment")],
        [InlineKeyboardButton("üåç Small World", callback_data="small_world")],
        [InlineKeyboardButton("‚ö° Imperative", callback_data="imperative")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_TEMPLATE

async def handle_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    template_key = query.data
    if template_key not in TEMPLATES:
        await query.edit_message_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return await main_menu(update, context)
    
    context.user_data["template_key"] = template_key
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return INPUT_NAME

async def generate_document(update: Update, context: ContextTypes.DEFAULT_TYPE, new_date=None):
    client_name = update.message.text.strip()
    template_key = context.user_data["template_key"]
    template_path = os.path.join("templates", TEMPLATES[template_key]["file"])
    
    kyiv_tz = ZoneInfo("Europe/Kiev")
    date_str = new_date or datetime.now(kyiv_tz).strftime("%Y-%m-%d")
    
    try:
        await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        temp_doc = process_template(template_path, client_name, date_str, template_key)
        pdf_path = convert_to_pdf(temp_doc, client_name)
        
        with open(pdf_path, "rb") as f:
            await update.message.reply_document(
                document=f,
                caption=f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è {client_name} –≥–æ—Ç–æ–≤!",
                filename=f"{client_name}.pdf"
            )
        
        await cleanup_files(temp_doc, pdf_path)
        
        context.user_data.update({
            "client_name": client_name,
            "date": date_str
        })
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_action_keyboard()
        )
        return CHANGE_DATE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
        return await main_menu(update, context)

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await generate_document(update, context)

async def bookmark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_data = context.user_data
    try:
        with sqlite3.connect("bookmarks.db") as conn:
            conn.execute(
                "INSERT INTO bookmarks (user_id, client_name, template_name, date) VALUES (?, ?, ?, ?)",
                (query.from_user.id, user_data["client_name"], user_data["template_key"], user_data["date"])
            )
        await query.edit_message_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–ª–∞–¥–∫–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!")
    
    return CHANGE_DATE

async def change_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìÜ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    return INPUT_NEW_DATE

async def receive_new_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parsed_date = parse(update.message.text.strip())
        new_date = parsed_date.strftime("%Y-%m-%d")
        return await generate_document(update, context, new_date)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return INPUT_NEW_DATE

async def view_bookmarks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        with sqlite3.connect("bookmarks.db") as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT client_name, template_name, date FROM bookmarks WHERE user_id = ? ORDER BY created_at DESC",
                (user_id,)
            )
            bookmarks = cursor.fetchall()
        
        if not bookmarks:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return await main_menu(update, context)
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìå {client} ({template}, {date})",
                callback_data=f"load_bookmark_{i}"
            )] for i, (client, template, date) in enumerate(bookmarks)
        ]
        keyboard.append([InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")])
        
        await update.message.reply_text(
            "üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return VIEW_BOOKMARKS
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–ª–∞–¥–æ–∫!")
        return await main_menu(update, context)

async def view_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton(
            f"{vac['title']} | {vac['location']} | {vac['salary']}",
            callback_data=f"vacancy_{vac['id']}"
        )] for vac in VACANCIES[:10]  # –ü–µ—Ä–≤—ã–µ 10 –≤–∞–∫–∞–Ω—Å–∏–π
    ]
    keyboard.append([InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")])
    
    await query.edit_message_text(
        "üíº –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return VIEW_VACANCIES

async def view_vacancy_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    vac_id = query.data.split("_")[1]
    vacancy = next((v for v in VACANCIES if v["id"] == vac_id), None)
    
    if not vacancy:
        await query.edit_message_text("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return await main_menu(update, context)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º", callback_data="view_vacancies")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await query.edit_message_text(
        vacancy["description"],
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    return VIEW_VACANCY_DETAILS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return await main_menu(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}\n{traceback.format_exc()}")
    if update:
        msg = update.message or update.callback_query.message
        await msg.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        CommandHandler("menu", main_menu),
        CommandHandler("templates", select_template),
        CommandHandler("bookmarks", view_bookmarks),
        CommandHandler("vacancies", view_vacancies),
        MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
    ],
    states={
        MAIN_MENU: [
            CallbackQueryHandler(select_template, pattern="^select_template$"),
            CallbackQueryHandler(view_bookmarks, pattern="^view_bookmarks$"),
            CallbackQueryHandler(view_vacancies, pattern="^view_vacancies$"),
        ],
        SELECT_TEMPLATE: [
            CallbackQueryHandler(handle_template_selection, pattern="^(ur_recruitment|small_world|imperative)$"),
            CallbackQueryHandler(main_menu, pattern="^main_menu$")
        ],
        INPUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
        CHANGE_DATE: [
            CallbackQueryHandler(bookmark, pattern="^bookmark$"),
            CallbackQueryHandler(change_date, pattern="^change_date$"),
            CallbackQueryHandler(select_template, pattern="^select_template$"),
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name),
        ],
        INPUT_NEW_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new_date)],
        VIEW_BOOKMARKS: [
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
        ],
        VIEW_VACANCIES: [
            CallbackQueryHandler(view_vacancy_details, pattern="^vacancy_"),
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
        ],
        VIEW_VACANCY_DETAILS: [
            CallbackQueryHandler(view_vacancies, pattern="^view_vacancies$"),
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
        ]
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_message=True
)

application.add_handler(conv_handler)
application.add_error_handler(error_handler)

# –í–µ–±—Ö—É–∫
async def webhook_handler(request):
    try:
        update = telegram.Update.de_json(await request.json(), application.bot)
        await application.process_update(update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500)

async def set_webhook():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
    await application.bot.set_webhook(webhook_url)

async def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    await application.initialize()
    await application.start()
    await set_webhook()
    
    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)
    app.router.add_get("/ping", lambda _: web.Response(text="OK"))
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.getenv("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"ü§ñ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {await application.bot.get_webhook_info()}")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = ["templates"]
    for directory in required_dirs:
        if not os.path.exists(directory):
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}!")
            exit(1)
    
    try:
        asyncio.run(run_server())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
