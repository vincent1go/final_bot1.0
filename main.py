import os
import uuid
import subprocess
import sqlite3
import logging
import asyncio
import traceback
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
import random

import docx
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from dateutil.parser import parse
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.critical("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(BOT_TOKEN).build()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    MAIN_MENU,
    SELECT_TEMPLATE,
    INPUT_NAME,
    CHANGE_DATE,
    INPUT_NEW_DATE,
    GENERATE_ANOTHER,
    VIEW_BOOKMARKS,
    VIEW_VACANCIES,
    VIEW_VACANCY_DETAILS
) = range(9)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("bookmarks.db") as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS bookmarks
                    (user_id INTEGER, 
                     client_name TEXT, 
                     template_name TEXT, 
                     date TEXT)""")
        conn.commit()

init_db()

# –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
TEMPLATES = {
    "ur_recruitment": "template_ur.docx",
    "small_world": "template_small_world.docx",
    "imperative": "template_imperative.docx",
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
VACANCIES = [
    {
        "id": "vac_1",
        "title": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞ –∑–∞–≤–æ–¥ Coca-Cola",
        "location": "–õ–æ–Ω–¥–æ–Ω",
        "salary": "3700-4100¬£",
        "description": """üîπ *–¢—Ä–µ–±—É—é—Ç—Å—è –°–û–¢–†–£–î–ù–ò–ö–ò –ù–ê –ó–ê–í–û–î* üîπ
        
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* Coca-Cola Europacific Partners
üåç *–õ–æ–∫–∞—Ü–∏—è:* –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, –õ–æ–Ω–¥–æ–Ω
üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* 3700-4100¬£/–º–µ—Å—è—Ü

üìå *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –ú—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã 18‚Äì55 –ª–µ—Ç
‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ
‚Ä¢ –û–ø—ã—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ ‚Äî –ø–ª—é—Å

üìã *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ –ª–∏–Ω–∏–∏ —Ä–æ–∑–ª–∏–≤–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∏
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
‚Ä¢ –£–ø–∞–∫–æ–≤–∫–∞ –ø–∞–ª–ª–µ—Ç, –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞

‚è± *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –°–º–µ–Ω—ã –ø–æ 8‚Äì12 —á–∞—Å–æ–≤
‚Ä¢ 5‚Äì6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

üè† *–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º
‚Ä¢ 2‚Äì3 —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ"""
    },
    {
        "id": "vac_2",
        "title": "–†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å–∫–ª–∞–¥–∞ Amazon",
        "location": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä",
        "salary": "3800-4200¬£",
        "description": """üîπ *–¢—Ä–µ–±—É—é—Ç—Å—è –†–ê–ë–û–¢–ù–ò–ö–ò –°–ö–õ–ê–î–ê* üîπ
        
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* Amazon
üåç *–õ–æ–∫–∞—Ü–∏—è:* –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, –ú–∞–Ω—á–µ—Å—Ç–µ—Ä
üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* 3800-4200¬£/–º–µ—Å—è—Ü

üìå *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç 18‚Äì50 –ª–µ—Ç
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è

üìã *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ —É–ø–∞–∫–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–≥—Ä—É–∑–æ—á–Ω–æ-—Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã

‚è± *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –°–º–µ–Ω—ã –ø–æ 9‚Äì11 —á–∞—Å–æ–≤
‚Ä¢ 5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

üè† *–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∂–∏–ª—å—è"""
    },
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    {
        "id": "vac_3",
        "title": "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ç–∞–Ω–∫–æ–≤",
        "location": "–ë–∏—Ä–º–∏–Ω–≥–µ–º",
        "salary": "3900-4300¬£",
        "description": """üîπ *–¢—Ä–µ–±—É—é—Ç—Å—è –û–ü–ï–†–ê–¢–û–†–´ –°–¢–ê–ù–ö–û–í* üîπ
        
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* MetalWorks Ltd
üåç *–õ–æ–∫–∞—Ü–∏—è:* –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, –ë–∏—Ä–º–∏–Ω–≥–µ–º
üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* 3900-4300¬£/–º–µ—Å—è—Ü

üìå *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –ú—É–∂—á–∏–Ω—ã 20‚Äì45 –ª–µ—Ç
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–µ

üìã *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö –ß–ü–£
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ

‚è± *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –°–º–µ–Ω—ã –ø–æ 8‚Äì10 —á–∞—Å–æ–≤
‚Ä¢ 5‚Äì6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

üè† *–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–∂–∏—Ç–∏–µ"""
    }
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
for i in range(4, 31):
    cities = ["–õ–æ–Ω–¥–æ–Ω", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä", "–ë–∏—Ä–º–∏–Ω–≥–µ–º", "–õ–∏–≤–µ—Ä–ø—É–ª—å", "–ì–ª–∞–∑–≥–æ", "–®–µ—Ñ—Ñ–∏–ª–¥"]
    positions = ["—Ñ–∞—Å–æ–≤—â–∏–∫–∏", "–≥—Ä—É–∑—á–∏–∫–∏", "—É–ø–∞–∫–æ–≤—â–∏–∫–∏", "–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã", "–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤—â–∏–∫–∏", "–∫–ª–∞–¥–æ–≤—â–∏–∫–∏"]
    companies = ["Tesco", "Sainsbury's", "Asda", "Morrisons", "IKEA", "DHL"]
    
    city = random.choice(cities)
    position = random.choice(positions)
    company = random.choice(companies)
    salary_min = random.randint(3700, 3900)
    salary_max = salary_min + random.randint(200, 400)
    hours = random.choice(["8-10", "9-11", "10-12"])
    days = random.choice(["5", "5-6"])
    
    VACANCIES.append({
        "id": f"vac_{i}",
        "title": f"{position.capitalize()} –¥–ª—è {company}",
        "location": city,
        "salary": f"{salary_min}-{salary_max}¬£",
        "description": f"""üîπ *–¢—Ä–µ–±—É—é—Ç—Å—è {position.upper()}* üîπ
        
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {company}
üåç *–õ–æ–∫–∞—Ü–∏—è:* –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, {city}
üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {salary_min}-{salary_max}¬£/–º–µ—Å—è—Ü

üìå *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç 18‚Äì50 –ª–µ—Ç
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è

üìã *–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ/—Å–∫–ª–∞–¥–µ
‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á

‚è± *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –°–º–µ–Ω—ã –ø–æ {hours} —á–∞—Å–æ–≤
‚Ä¢ {days} –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

üè† *–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ {random.choice(['–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º', '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 50%', '–ü–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –∂–∏–ª—å—è'])}"""
    })

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="select_template")],
        [InlineKeyboardButton("üìÅ –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ", callback_data="view_bookmarks")],
        [InlineKeyboardButton("üíº –í–∞–∫–∞–Ω—Å–∏–∏ –≤ UK", callback_data="view_vacancies")]
    ])

def get_action_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚≠ê –í –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmark"),
            InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="change_date")
        ],
        [
            InlineKeyboardButton("üìã –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="select_template"),
            InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="main_menu")
        ]
    ])

async def cleanup_files(*files):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    for file in files:
        if os.path.exists(file):
            try:
                os.remove(file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")

def replace_client_and_date(doc_path, client_name, date_str, template_key):
    """–ó–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω–µ DOCX —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏"""
    try:
        if not os.path.exists(doc_path):
            raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω {doc_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        doc = docx.Document(doc_path)
        
        # –ó–∞–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
        client_replaced = False
        for para in doc.paragraphs:
            if "Client:" in para.text:
                if template_key == "small_world":
                    # –î–ª—è Small World —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    para.text = para.text.replace("Client:", f"Client: {client_name}")
                else:
                    para.text = para.text.replace("Client:", f"Client: {client_name}")
                client_replaced = True
                break
        
        # –ó–∞–º–µ–Ω–∞ –¥–∞—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏
        date_replaced_count = 0
        for para in doc.paragraphs[-6:]:  # –ò—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
            if ("Date:" in para.text or "DATE:" in para.text) and date_replaced_count < 2:
                if template_key == "small_world":
                    # –î–ª—è Small World —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –ø–µ—á–∞—Ç—å
                    if "Date:" in para.text:
                        para.text = para.text.replace("Date:", f"Date: {date_str}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏ –ø–µ—á–∞—Ç–∏
                        next_para = doc.paragraphs[doc.paragraphs.index(para)+1]
                        next_para.text = "\t\t\t\t\t\t\t___________________\n\t\t\t\t\t\t\tSignature & Stamp"
                elif template_key == "imperative":
                    # –î–ª—è Imperative –∑–∞–º–µ–Ω—è–µ–º DATE:
                    para.text = para.text.replace("DATE:", f"DATE: {date_str}")
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞
                    para.text = para.text.replace("Date:", f"Date: {date_str}")
                date_replaced_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        temp_path = f"temp_{uuid.uuid4()}.docx"
        doc.save(temp_path)
        return temp_path
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise

def convert_to_pdf(doc_path, client_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ PDF"""
    try:
        subprocess.run(
            [
                "libreoffice",
                "--headless",
                "--nofirststartwizard",
                "--convert-to",
                "pdf",
                "--outdir",
                os.path.dirname(doc_path) or ".",
                doc_path
            ],
            check=True,
            timeout=60
        )
        
        temp_pdf = os.path.splitext(doc_path)[0] + ".pdf"
        pdf_path = f"{client_name}.pdf"
        
        if os.path.exists(temp_pdf):
            os.rename(temp_pdf, pdf_path)
            return pdf_path
        raise FileNotFoundError("PDF –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        raise

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.message:
        await update.message.reply_text(text, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    return MAIN_MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    return await main_menu(update, context)

async def select_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù UR Recruitment", callback_data="ur_recruitment")],
        [InlineKeyboardButton("üåç Small World", callback_data="small_world")],
        [InlineKeyboardButton("‚ö° Imperative", callback_data="imperative")],
    ]
    await query.edit_message_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_TEMPLATE

async def handle_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    context.user_data["template_key"] = query.data
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return INPUT_NAME

async def generate_document(update, context, new_date=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    client_name = update.message.text.strip()
    template_key = context.user_data["template_key"]
    template_path = os.path.join("templates", TEMPLATES[template_key])
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã
    kyiv_tz = ZoneInfo("Europe/Kiev")
    date_str = new_date or datetime.now(kyiv_tz).strftime("%Y-%m-%d")
    context.user_data.update({
        "client_name": client_name,
        "date": date_str
    })
    
    try:
        await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        temp_doc = replace_client_and_date(template_path, client_name, date_str, template_key)
        pdf_path = convert_to_pdf(temp_doc, client_name)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        with open(pdf_path, "rb") as f:
            await update.message.reply_document(document=f, filename=f"{client_name}.pdf")
        
        # –û—á–∏—Å—Ç–∫–∞
        await cleanup_files(temp_doc, pdf_path)
        
        # –û—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_action_keyboard()
        )
        return CHANGE_DATE
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    return await generate_document(update, context)

async def bookmark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_data = {
        "user_id": query.from_user.id,
        "client_name": context.user_data["client_name"],
        "template_key": context.user_data["template_key"],
        "date": context.user_data["date"]
    }
    
    try:
        with sqlite3.connect("bookmarks.db") as conn:
            conn.execute(
                "INSERT INTO bookmarks VALUES (?, ?, ?, ?)",
                (user_data["user_id"], user_data["client_name"], 
                 user_data["template_key"], user_data["date"])
            )
        await query.edit_message_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–ª–∞–¥–∫–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    
    return CHANGE_DATE

async def change_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    return INPUT_NEW_DATE

async def receive_new_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    try:
        parsed_date = parse(update.message.text.strip())
        new_date = parsed_date.strftime("%Y-%m-%d")
        return await generate_document(update, context, new_date)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return INPUT_NEW_DATE

async def view_bookmarks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–ª–∞–¥–æ–∫"""
    try:
        user_id = update.effective_user.id
        
        with sqlite3.connect("bookmarks.db") as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT client_name, template_name, date FROM bookmarks WHERE user_id = ?",
                (user_id,)
            )
            bookmarks = cursor.fetchall()
        
        if not bookmarks:
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            else:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return await main_menu(update, context)
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìå {client} ({template}, {date})",
                callback_data=f"bookmark_{client}_{template}_{date}"
            )] for client, template, date in bookmarks
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        if update.callback_query:
            await update.callback_query.answer
