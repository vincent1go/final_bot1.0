import os
import sqlite3
import pytz
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, MessageHandler,
    Filters, ConversationHandler, CallbackContext
)
from docx import Document
from flask import Flask, request
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
updater = None
dispatcher = None

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –≤–µ–±—Ö—É–∫
TOKEN = os.environ.get('BOT_TOKEN', '7511704960:AAFKDWgg2-cAzRxywX1gXK47OQRWJi72qGw')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL', 'https://final-bot1-0.onrender.com/webhook')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_TEMPLATE, INPUT_NAME, CHOOSE_DATE, INPUT_CUSTOM_DATE, ASK_SAVE = range(5)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–µ–≤–∞
kiev_tz = pytz.timezone('Europe/Kiev')

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
TEMPLATE_FILES = {
    'template_imperative': 'templates/template_imperative.docx',
    'template_ur': 'templates/template_ur.docx',
    'template_small_world': 'templates/template_small_world.docx',
}

# ---- –§–£–ù–ö–¶–ò–ò –ö–û–¢–û–†–´–ï –ù–£–ñ–ù–´ ----

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    update.message.reply_text('üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–∞–ø–∏—à–∏ /generate.')

def start_generate(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate."""
    keyboard = [
        [
            InlineKeyboardButton("–ò–º–ø–µ—Ä–∞—Ç–∏–≤", callback_data='template_imperative'),
            InlineKeyboardButton("–£–†", callback_data='template_ur'),
            InlineKeyboardButton("Small World", callback_data='template_small_world'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', reply_markup=reply_markup)

def template_selected(update: Update, context: CallbackContext):
    pass  # –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞

def name_input(update: Update, context: CallbackContext):
    pass  # –∑–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏

def date_chosen(update: Update, context: CallbackContext):
    pass  # –∑–¥–µ—Å—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã

def input_custom_date(update: Update, context: CallbackContext):
    pass  # –∑–¥–µ—Å—å –≤–≤–æ–¥ —Å–≤–æ–µ–π –¥–∞—Ç—ã

def save_decision(update: Update, context: CallbackContext):
    pass  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç

def list_saved(update: Update, context: CallbackContext):
    update.message.reply_text("üìÑ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)")

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

# ---- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò FLASK ----

@app.route('/webhook', methods=['POST'])
def webhook():
    global dispatcher
    try:
        update_data = request.get_json(force=True)
        logger.info(f"Received update: {update_data}")
        update = Update.de_json(update_data, updater.bot)
        if update and dispatcher:
            dispatcher.process_update(update)
            logger.info("Update processed successfully")
        else:
            logger.error("Failed to parse update or dispatcher not initialized")
        return 'OK'
    except Exception as e:
        logger.error(f"Webhook error: {str(e)}")
        return 'OK', 200

@app.route('/ping')
def ping():
    logger.info("Received ping request")
    return 'OK'

# ---- MAIN ----

def main():
    logger.info("Starting bot...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS saved_documents
                 (id INTEGER PRIMARY KEY, user_id INTEGER, template TEXT, client_name TEXT, date TEXT)''')
    conn.commit()
    conn.close()
    logger.info("Database initialized")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    try:
        open("templates.zip", "rb")
    except FileNotFoundError as e:
        logger.error(f"Template check failed: {str(e)}")
        exit(1)

    global updater, dispatcher
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    logger.info("Updater and dispatcher initialized")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('generate', start_generate)],
        states={
            SELECT_TEMPLATE: [CallbackQueryHandler(template_selected)],
            INPUT_NAME: [MessageHandler(Filters.text & ~Filters.command, name_input)],
            CHOOSE_DATE: [CallbackQueryHandler(date_chosen)],
            INPUT_CUSTOM_DATE: [MessageHandler(Filters.text & ~Filters.command, input_custom_date)],
            ASK_SAVE: [CallbackQueryHandler(save_decision)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(CommandHandler('list_saved', list_saved))
    logger.info("Handlers registered")

    try:
        updater.bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"Webhook set to {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {str(e)}")
        exit(1)

    port = int(os.environ.get('PORT', 5000))
    logger.info(f"Starting Flask on port {port}")
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    main()
