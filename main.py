import os
import uuid
import subprocess
import sqlite3
import logging
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
import random

import docx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from dateutil.parser import parse

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.critical("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(BOT_TOKEN).build()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    MAIN_MENU,
    SELECT_TEMPLATE,
    INPUT_NAME,
    CHANGE_DATE,
    INPUT_NEW_DATE,
    VIEW_BOOKMARKS,
) = range(6)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("bookmarks.db") as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS bookmarks
                    (user_id INTEGER, 
                     client_name TEXT, 
                     template_name TEXT, 
                     date TEXT)""")
        conn.commit()

init_db()

# –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
TEMPLATES = {
    "ur_recruitment": "template_ur.docx",
    "small_world": "template_small_world.docx",
    "imperative": "template_imperative.docx",
}

def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="select_template")],
        [InlineKeyboardButton("üìÅ –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ", callback_data="view_bookmarks")],
        [InlineKeyboardButton("üíº –í–∞–∫–∞–Ω—Å–∏–∏ –≤ UK", callback_data="view_vacancies")]
    ])

def get_action_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚≠ê –í –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmark"),
            InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data="change_date")
        ],
        [
            InlineKeyboardButton("üìã –ö —à–∞–±–ª–æ–Ω–∞–º", callback_data="select_template"),
            InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="main_menu")
        ]
    ])

async def cleanup_files(*files):
    for file in files:
        if os.path.exists(file):
            try:
                os.remove(file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")

def replace_client_and_date(doc_path, client_name, date_str, template_key):
    try:
        if not os.path.exists(doc_path):
            raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω {doc_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        doc = docx.Document(doc_path)
        
        # –ó–∞–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
        for para in doc.paragraphs:
            if "Client:" in para.text:
                para.text = f"Client: {client_name}"
                break
        
        # –ó–∞–º–µ–Ω–∞ –¥–∞—Ç—ã (—É—á–∏—Ç—ã–≤–∞–µ—Ç Date:, DATE: –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        for para in doc.paragraphs:
            if any(marker in para.text for marker in ["Date:", "DATE:"]):
                para.text = f"Date: {date_str}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è small_world
        if template_key == "small_world":
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ –¥–∞—Ç—ã
            for para in doc.paragraphs:
                if "Date:" in para.text:
                    para.add_run().add_picture("signature.png", width=docx.shared.Cm(4))
                    break
        
        temp_path = f"temp_{uuid.uuid4()}.docx"
        doc.save(temp_path)
        return temp_path
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise

def convert_to_pdf(doc_path, client_name):
    try:
        result = subprocess.run(
            [
                "libreoffice",
                "--headless",
                "--nofirststartwizard",
                "--convert-to",
                "pdf",
                "--outdir",
                os.path.dirname(doc_path) or ".",
                doc_path
            ],
            check=True,
            timeout=60,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        temp_pdf = os.path.splitext(doc_path)[0] + ".pdf"
        pdf_path = f"{client_name}.pdf"
        
        if os.path.exists(temp_pdf):
            os.rename(temp_pdf, pdf_path)
            return pdf_path
        raise FileNotFoundError("PDF –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e.stderr.decode()}")
        raise
    except subprocess.TimeoutExpired:
        logger.error("–¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    return await main_menu(update, context)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.message:
        await update.message.reply_text(text, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    return MAIN_MENU

async def select_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìù UR Recruitment", callback_data="ur_recruitment")],
        [InlineKeyboardButton("üåç Small World", callback_data="small_world")],
        [InlineKeyboardButton("‚ö° Imperative", callback_data="imperative")],
    ]
    await query.edit_message_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_TEMPLATE

async def handle_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data["template_key"] = query.data
    await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return INPUT_NAME

async def generate_document(update, context, new_date=None):
    client_name = update.message.text.strip()
    template_key = context.user_data["template_key"]
    template_path = os.path.join("templates", TEMPLATES[template_key])
    
    kyiv_tz = ZoneInfo("Europe/Kiev")
    date_str = new_date or datetime.now(kyiv_tz).strftime("%Y-%m-%d")
    context.user_data.update({
        "client_name": client_name,
        "date": date_str
    })
    
    try:
        await update.message.reply_text("‚è≥ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        temp_doc = replace_client_and_date(template_path, client_name, date_str, template_key)
        pdf_path = convert_to_pdf(temp_doc, client_name)
        
        with open(pdf_path, "rb") as f:
            await update.message.reply_document(document=f, filename=f"{client_name}.pdf")
        
        await cleanup_files(temp_doc, pdf_path)
        
        await update.message.reply_text(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_action_keyboard()
        )
        return CHANGE_DATE
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await generate_document(update, context)

async def bookmark(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_data = {
        "user_id": query.from_user.id,
        "client_name": context.user_data["client_name"],
        "template_key": context.user_data["template_key"],
        "date": context.user_data["date"]
    }
    
    try:
        with sqlite3.connect("bookmarks.db") as conn:
            conn.execute(
                "INSERT INTO bookmarks VALUES (?, ?, ?, ?)",
                (user_data["user_id"], user_data["client_name"], 
                 user_data["template_key"], user_data["date"])
            )
        await query.edit_message_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–ª–∞–¥–∫–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    
    return CHANGE_DATE

async def change_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    return INPUT_NEW_DATE

async def receive_new_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parsed_date = parse(update.message.text.strip())
        new_date = parsed_date.strftime("%Y-%m-%d")
        return await generate_document(update, context, new_date)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return INPUT_NEW_DATE

async def view_bookmarks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        
        with sqlite3.connect("bookmarks.db") as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT client_name, template_name, date FROM bookmarks WHERE user_id = ?",
                (user_id,)
            )
            bookmarks = cursor.fetchall()
        
        if not bookmarks:
            await update.callback_query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return await main_menu(update, context)
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìå {client} ({template}, {date})",
                callback_data=f"bookmark_{client}_{template}_{date}"
            )] for client, template, date in bookmarks
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await update.callback_query.edit_message_text(
            "üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return VIEW_BOOKMARKS
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫–ª–∞–¥–æ–∫: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
        return await main_menu(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return await main_menu(update, context)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.callback_query:
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
    return ConversationHandler.END

def main():
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(select_template, pattern="^select_template$"),
                CallbackQueryHandler(view_bookmarks, pattern="^view_bookmarks$"),
            ],
            SELECT_TEMPLATE: [
                CallbackQueryHandler(handle_template_selection, pattern="^(ur_recruitment|small_world|imperative)$")
            ],
            INPUT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)
            ],
            CHANGE_DATE: [
                CallbackQueryHandler(bookmark, pattern="^bookmark$"),
                CallbackQueryHandler(change_date, pattern="^change_date$"),
                CallbackQueryHandler(select_template, pattern="^select_template$"),
                CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            ],
            INPUT_NEW_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new_date)
            ],
            VIEW_BOOKMARKS: [
                CallbackQueryHandler(main_menu, pattern="^main_menu$")
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    application.run_polling()

if __name__ == "__main__":
    main()
